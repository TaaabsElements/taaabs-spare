/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function(root) {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = { QueryList: peg$parseQueryList },
        peg$startRuleFunction  = peg$parseQueryList,

        peg$c0 = function(requests) {
        	/* Global SELECT on all values */
        	var res = "SELECT * WHERE {\n";
          for(var i in _queries){
            res += Query._to_string(i);
          }
          res += '}';

        	/* TODO Remove, for test purpose only */
          console.log(res.replace(/(?:\\[rn]|[\r\n]+)+/g, ""));
          return {
            'query': res,
            'requests': requests
          };
        },
        peg$c1 = function(body) {
        	return text();
        },
        peg$c2 = "Je cherche \xE0",
        peg$c3 = peg$literalExpectation("Je cherche \xE0", false),
        peg$c4 = function(action) {
                  _queries.push(action);
               },
        peg$c5 = "Je nomme",
        peg$c6 = peg$literalExpectation("Je nomme", false),
        peg$c7 = "l'ensemble des obsels",
        peg$c8 = peg$literalExpectation("l'ensemble des obsels", false),
        peg$c9 = function(name, cond) {
                 // Creating the var containg the sub query.
                 var s = new Variable(_T_SUB_QUERY);
                     s.simple_builder(name);

                 // Set the condition target variable id.
                 var conds = [];
                 for(var i in cond){
                   cond[i].target_var_id = s.id;
                   conds.push(cond[i]);
                 }

                 s.conds = conds;
               },
        peg$c10 = "Parmi",
        peg$c11 = peg$literalExpectation("Parmi", false),
        peg$c12 = "je cherche \xE0",
        peg$c13 = peg$literalExpectation("je cherche \xE0", false),
        peg$c14 = function(name, action) {
                 // Retrieve the sub query variable and adds it to the conditions of the query.
                 var v = Variable._search(name).copy();
                     v.main_var_id = action.main_var_id;
                     console.log(v);
                     console.log(action);
                 action.conds.push(v);
                 _queries.push(action);
               },
        peg$c15 = "r\xE9cup\xE9rer les obsels",
        peg$c16 = peg$literalExpectation("r\xE9cup\xE9rer les obsels", false),
        peg$c17 = function(cond, name) {
                    // Creating subject, verb & object vars.
                    var s = new Variable();
                        s.simple_builder(name);
                    var v = new Variable();
                        v.simple_builder();
                    var p = new Variable();
                        p.simple_builder();
                    // Creating the triplet var.
                    var t = new Variable(_T_TRIPLET);
                        t.triplet_builder(s.id, v.id, p.id);

                    // Set the condition target variable id.
        						var conds = [t];
                    for(var i in cond){
                      cond[i].target_var_id = s.id;
                      conds.push(cond[i]);
                    }

                    // Create the query
                    var q = new Query();
                    q.vars = [t];
                    q.conds = conds;
                    q.order = [s.name];
                    q.main_var_id = s.id;
                    return q;
        					},
        peg$c18 = "compter le nombre d'obsels",
        peg$c19 = peg$literalExpectation("compter le nombre d'obsels", false),
        peg$c20 = function(cond, name) {
                    var c = new Variable(_T_COUNT);
                        c.simple_builder(name);

                    // Set the condition target variable id.
        						var conds = [];
                    for(var i in cond){
                      cond[i].target_var_id = c.id;
                      conds.push(cond[i]);
                    }

                    // Create the query
                    var q = new Query();
                    q.vars = [c];
                    q.conds = conds;
                    q.main_var_id = c.id;
                    return q;
                  },
        peg$c21 = function(type) {
                      return type;
                    },
        peg$c22 = function(cond) {
        							return cond;
        						},
        peg$c23 = "de type",
        peg$c24 = peg$literalExpectation("de type", false),
        peg$c25 = function(name) {
                      var t = new Variable(_T_TYPE_COND);
                          t.condition_type_builder('m:'+name);
                      return t;
                    },
        peg$c26 = "ayant un attribut",
        peg$c27 = peg$literalExpectation("ayant un attribut", false),
        peg$c28 = function(name, value) {
                      var a = new Variable(_T_ATTR_COND);
                          a.condition_attribute_builder('m:'+name, value.operator, value.value);
                      return a;
                    },
        peg$c29 = "\xE9gal \xE0",
        peg$c30 = peg$literalExpectation("\xE9gal \xE0", false),
        peg$c31 = function(value) {
                      return {
                        'operator': '=',
                        'value': value
                      }
                    },
        peg$c32 = "inferieur \xE0",
        peg$c33 = peg$literalExpectation("inferieur \xE0", false),
        peg$c34 = function(value) {
                      return {
                        'operator': '<',
                        'value': value
                      }
                    },
        peg$c35 = "superieur \xE0",
        peg$c36 = peg$literalExpectation("superieur \xE0", false),
        peg$c37 = function(value) {
                      return {
                        'operator': '>',
                        'value': value
                      }
                    },
        peg$c38 = "nomm\xE9s",
        peg$c39 = peg$literalExpectation("nomm\xE9s", false),
        peg$c40 = function(group_name) {
        	return group_name;
        },
        peg$c41 = /^[a-zA-Z]/,
        peg$c42 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
        peg$c43 = function() {
        	return text();
        },
        peg$c44 = function() {
        	return '?'+text();
        },
        peg$c45 = /^["]/,
        peg$c46 = peg$classExpectation(["\""], false, false),
        peg$c47 = /^[^"]/,
        peg$c48 = peg$classExpectation(["\""], true, false),
        peg$c49 = function() {
                  return text();
                },
        peg$c50 = /^[0-9]/,
        peg$c51 = peg$classExpectation([["0", "9"]], false, false),
        peg$c52 = "\n",
        peg$c53 = peg$literalExpectation("\n", false),
        peg$c54 = " ",
        peg$c55 = peg$literalExpectation(" ", false),
        peg$c56 = ".",
        peg$c57 = peg$literalExpectation(".", false),
        peg$c58 = ",",
        peg$c59 = peg$literalExpectation(",", false),

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseQueryList() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseQuery();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseQuery();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseQuery() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseBody();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEnd();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseNewLine();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseNewLine();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c1(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBody() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c2) {
        s1 = peg$c2;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSpace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseSpace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAction();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c4(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 8) === peg$c5) {
          s1 = peg$c5;
          peg$currPos += 8;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseSpace();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseSpace();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseGROUP_NAME();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseSpace();
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseSpace();
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                if (input.substr(peg$currPos, 21) === peg$c7) {
                  s5 = peg$c7;
                  peg$currPos += 21;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c8); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parseSpace();
                  if (s7 !== peg$FAILED) {
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parseSpace();
                    }
                  } else {
                    s6 = peg$FAILED;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parseCondition();
                    if (s8 !== peg$FAILED) {
                      while (s8 !== peg$FAILED) {
                        s7.push(s8);
                        s8 = peg$parseCondition();
                      }
                    } else {
                      s7 = peg$FAILED;
                    }
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c9(s3, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c10) {
            s1 = peg$c10;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c11); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseSpace();
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseSpace();
              }
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseGROUP_NAME();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseComma();
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parseSpace();
                  if (s6 !== peg$FAILED) {
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parseSpace();
                    }
                  } else {
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 12) === peg$c12) {
                      s6 = peg$c12;
                      peg$currPos += 12;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c13); }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = [];
                      s8 = peg$parseSpace();
                      if (s8 !== peg$FAILED) {
                        while (s8 !== peg$FAILED) {
                          s7.push(s8);
                          s8 = peg$parseSpace();
                        }
                      } else {
                        s7 = peg$FAILED;
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parseAction();
                        if (s8 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c14(s3, s8);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parseAction() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 20) === peg$c15) {
        s1 = peg$c15;
        peg$currPos += 20;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSpace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseCondition();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseCondition();
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseSpace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseSpace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseNaming();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c17(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 26) === peg$c18) {
          s1 = peg$c18;
          peg$currPos += 26;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseSpace();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseSpace();
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parseCondition();
            if (s4 !== peg$FAILED) {
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseCondition();
              }
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseSpace();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseSpace();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseNaming();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c20(s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseCondition() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseConditionType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseComma();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseSpace();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseSpace();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c21(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseConditionAttribute();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseComma();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parseSpace();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseSpace();
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c22(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseConditionType() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c23) {
        s1 = peg$c23;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSpace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseSpace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTYPE_NAME();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c25(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseConditionAttribute() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 17) === peg$c26) {
        s1 = peg$c26;
        peg$currPos += 17;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSpace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseSpace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTYPE_NAME();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseSpace();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseSpace();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseValueAttribute();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseComma();
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c28(s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseValueAttribute() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c29) {
        s1 = peg$c29;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSpace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseSpace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseVALUE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c31(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 11) === peg$c32) {
          s1 = peg$c32;
          peg$currPos += 11;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c33); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseSpace();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseSpace();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseVALUE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c34(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 11) === peg$c35) {
            s1 = peg$c35;
            peg$currPos += 11;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c36); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseSpace();
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseSpace();
              }
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseVALUE();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c37(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parseNaming() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c38) {
        s1 = peg$c38;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSpace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseSpace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseGROUP_NAME();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c40(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTYPE_NAME() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c41.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c42); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c41.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c42); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c43();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseGROUP_NAME() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c41.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c42); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c41.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c42); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c44();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseVALUE() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c45.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c46); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c47.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c48); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c47.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c48); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (peg$c45.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c46); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c49();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (peg$c50.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c51); }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c50.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c51); }
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c49();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseNewLine() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c52;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }

      return s0;
    }

    function peg$parseSpace() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 32) {
        s0 = peg$c54;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }

      return s0;
    }

    function peg$parseEnd() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 46) {
        s0 = peg$c56;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }

      return s0;
    }

    function peg$parseComma() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 44) {
        s0 = peg$c58;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c59); }
      }

      return s0;
    }


      /** ====================================================================== **/
      /**  Globals                                                               **/

      // Variables id increment.
      var id = 0;

      // Return the next id for variables.
      function _get_next_id(){
        var r = id;
        id ++;
        return r;
      }

      // Variable type Enum.
      var _T_TRIPLET   = 0;
      var _T_ATTR_COND = 1;
      var _T_SIMPLE    = 2;
      var _T_TYPE_COND = 3;
      var _T_COUNT     = 4;
      var _T_SUB_QUERY = 5;

      /** ====================================================================== **/
      /**  Sparql Queries                                                        **/

      /* Queries list */
      var _queries = [];

      /* Query class                                       */
      /* @param name, String, Name of the query. Optionnal */
      function Query(name) {
        if(name) q.name = name;
        this.id    = _get_next_id();
        this.vars  = [];
        this.conds = [];
        this.order = [];
        this.group = [];
      }

      /* Search for a query in _queries. If found, returns it. Otherwise, returns null */
      /* @param name, String, Name of the query.                                       */
      Query._search = function(name){
        for(var i in _queries)
          if(_queries[i].name === name)
            return _queries[i];
        return null;
      }

      Query._get = function(id){
        for(var i in _queries )
          if(_queries[i].id === id)
            return _queries[i];
        return null;
      }

      Query._to_string = function(i){
        var index = Number(i);
        // Prefix
        var qs = '{ SELECT ?query_index ';
        // Variables
        var v =  _queries[i].vars;
        for(var j in v){
          qs += v[j].to_var_string() + ' ';
        }
        // Conditions
        qs += 'WHERE{\n';
        qs += 'VALUES(?query_index){('+index+')}\n';
        var c = _queries[i].conds;
        var filters = "";
        for(var j in c){
          var cts = c[j].to_cond_string(filters);
          qs += cts.c + '\n';
          if(cts.f !== null) filters = cts.f;
        }
        if( filters.length > 0 ) qs += 'FILTER(' + filters + ')\n';
        qs += '}\n';
        // Order
        if(_queries[i].order.length > 0){
          qs += "ORDER BY";
          var ob = _queries[i].order;
          for(var j in ob){
            qs += ' ' + ob[j];
          }
          qs += '\n';
        }
        // Group
        if(_queries[i].group.length > 0){
          qs += "GROUP BY";
          var ob = _queries[i].group;
          for(var j in ob){
            qs += ' ' + ob[j];
          }
          qs += '\n';
        }
        // End of query
        qs += '}';
        if(i < _queries.length - 1) qs += '\nUNION\n';

        return qs
      }

      Query._to_sub_string = function(query){
        var name = Variable._get(query.main_var_id).name;
        // Prefix
        var qs = '{ SELECT ' + name + ' ';
        // Conditions
        qs += 'WHERE{\n';
        var c = query.conds;
        var filters = "";
        for(var j in c){
          c[j].target_var_id = query.main_var_id;
          var cts = c[j].to_cond_string(filters);
          qs += cts.c + '\n';
          if(cts.f !== null) filters = cts.f;
        }
        if( filters.length > 0 ) qs += 'FILTER(' + filters + ')\n';
        qs += '}\n';
        // End of query
        qs += '}';
        return qs
      }

      /** ====================================================================== **/
      /**  Sparql Variables                                                      **/

      /* Variables list */
      var _variables = [];

      /* Automatic variable name */
      var _auto_var = 'a';


      function Variable(type) {

        this.id = _get_next_id();

        this.type = (type !== undefined) ? type : _T_SIMPLE;

        /* Returns the next automatically generated variable name.                */
        this.get_next_auto_name = function(){
          // Prefix of the auto var.
          var v = 'auto_'+_auto_var;
          // Set the last char of the auto var
          var i = _auto_var.charCodeAt(_auto_var.length - 1);
          /* i === 122 means 'z'. */
          if(i < 122) _auto_var = _auto_var.substr(0, -1) + String.fromCharCode(i+1);
          else{
            _auto_var = "";
            for(var j = 0; j <= _auto_var.length; j++) _auto_var += 'a';
          }
          return '?'+v;
        }

        /* Stores a new variable in _variables.                                    */
        /* Return the variable.                                                    */
        /* @param name, String, name of the variable. Optionnal                    */
        this.simple_builder = function(name){
          this.name = name || this.get_next_auto_name();
          _variables.push(this);
          return this;
        }

        /* Stores a new variable in _variables.                                     */
        /* Return the variable.                                                     */
        /* @param name, String, name of the variable. Optionnal                     */
        this.triplet_builder = function(s_id, v_id, p_id){
          this.s = s_id;
          this.v = v_id;
          this.p = p_id;
          _variables.push(this);
          return this;
        }

        this.condition_attribute_builder = function(name, operator, value){
          this.name = this.get_next_auto_name();
          this.target_var_id  = -1;
          this.attribute_name = name;
          this.operator       = operator;
          this.value          = value;
          _variables.push(this);
          return this;
        }

        this.condition_type_builder = function(name){
          this.name = name;
          this.target_var_id = -1;
          _variables.push(this);
          return this;
        }

        this.to_var_string = function(){
          switch(this.type){

            case _T_TRIPLET:
              var s_name    = Variable._get(this.s).name.replace('?','');
              var subject   = '(?' +s_name                     + ' AS ?subject_'   + s_name+')';
              var verb      = '('  + Variable._get(this.v).name + ' AS ?verb_'      + s_name+')';
              var predicate = '('  + Variable._get(this.p).name + ' AS ?predicate_' + s_name+')';
              return subject + ' ' + verb + ' ' + predicate;
              break;

            case _T_COUNT:
              return '(COUNT(' + this.name + ') AS ?total_' + this.name.replace('?', '') + ')';

            default:
              return this.name;
              break;
          }
        }

        this.to_cond_string = function(f){
          switch(this.type){
            case _T_TRIPLET:
              return {
                'c': Variable._get(this.s).name + ' ' + Variable._get(this.v).name + ' ' + Variable._get(this.p).name + '.',
                'f': null
              }
              break;

            case _T_TYPE_COND:
              return {
                'c': Variable._get(this.target_var_id).name + ' a ' + this.name + '.',
                'f': null
              }
              break;

            case _T_ATTR_COND:
              if(f.length > 0) f += ' && ';
              f += this.name + ' ' + this.operator + ' ' + this.value;
              return {
                'c': Variable._get(this.target_var_id).name + ' ' + this.attribute_name + ' ' + this.name + '.',
                'f': f
              }
              break;

            case _T_SUB_QUERY:
              var qs = Query._to_sub_string(this);
              return {
                'c': qs,
                'f': null
              }
              break;
          }
        }

        this.copy = function(){
          var c = new Variable(this.type);
          switch(this.type){
            case _T_TRIPLET:
              c.triplet_builder(this.s, this.v, this.p);
              break;
            case _T_SUB_QUERY:
              c.simple_builder(this.name);
              c.conds = this.conds;
              break;
            case _T_ATTR_COND:
              c.condition_attribute_builder(this.name, this.operator, this.value);
              c.target_var_id = this.target_var_id;
              break;
            case _T_TYPE_COND:
              c.condition_type_builder(this.name);
              c.target_var_id = this.target_var_id;
              break;
          }
          return c;
        }
      }


      /* Returns true if the variable already exists in _variables.               */
      /* Returns false otherwise.                                                 */
      /* @param name String, the name of the variable                             */
      Variable._exists = function(name){
        for(var i in _variables)
          if(_variables[i].name === name)
            return true;
        return false;
      }

      /* Search for a query in _queries. If found, returns it. Otherwise, returns null */
      /* @param name, String, Name of the query.                                       */
      Variable._search = function(name){
        for(var i in _variables)
          if(_variables[i].name === name)
            return _variables[i];
        return null;
      }

      Variable._get = function(id){
        for(var i in _variables )
          if(_variables[i].id === id)
            return _variables[i];
        return null;
      }



    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  root.parser = {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})(this);
